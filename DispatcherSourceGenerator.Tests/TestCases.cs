namespace WayCoolStuff.Tests;

internal static class TestCases
{
    public static TestCase TestOne =>
        new (@"
    using System;
    using System.Treading.Tasks;

    namespace TestNamespace;

    public interface IMessageHandler<TestType>
    {
        Task HandleMessage(TestType msg);
    }

    public class TestType
    {
        public int Foo {get;set;}
    }

    public class Test1Handler : IMessageHandler<TestType>
    {
        public Task HandleMessage(TestType msg)
        {
            //do something
            return Task.CompletedTask; 
        }
    }
    ",
    @"// <auto-generated when=""Mon, 23 Jun 2025 01:45:31 GMT""/>

    using System;
    using System.Threading.Tasks;
    using Microsoft.Extensions.DependencyInjection;

    #nullable enable

    using TestNamespace;
    using WayCoolStuff;

    namespace WayCoolStuff;

    public sealed class ThingWithBigSwitch
    {
        private readonly IServiceProvider _services;

        public ThingWithBigSwitch(IServiceProvider services)
        {
            _services = services;
        }

        public async Task DispatchAsync(object data)
        {
            ArgumentNullException.ThrowIfNull(data);

            switch (data)
            {
                case TestType type0:
                {
                    var handler = _services.GetRequiredService<IMessageHandler<TestType>>();
                    await handler.HandleMessage(type0);
                    break;
                }
                default:
                    throw new WeirdError($""Cannot handle messages of type '{data.GetType().FullName}'"");
            }

        }
    }", "WeirdError");

    public static TestCase TestTwo =>
        new (@"
    using System;
    using System.Treading.Tasks;

    namespace TestNamespace;

    public interface IMessageHandler<TestType>
    {
        Task HandleMessage(TestType msg);
    }

    public interface IMessageDispatcher {}

    public class TestType
    {
        public int Foo {get;set;}
    }

    public class Test1Handler : IMessageHandler<TestType>
    {
        public Task HandleMessage(TestType msg)
        {
            //do something
            return Task.CompletedTask; 
        }
    }

    public partial class WeirdDispatcher : IMessageDispatcher
    {
    }
    ",
    @"// <auto-generated when=""Mon, 23 Jun 2025 02:23:40 GMT""/>

    using System;
    using System.Threading.Tasks;
    using Microsoft.Extensions.DependencyInjection;

    #nullable enable

    using TestNamespace;

    namespace TestNamespace;

    public partial class WeirdDispatcher
    {
        public async Task DispatchAsync(object data)
        {
            ArgumentNullException.ThrowIfNull(data);

            switch (data)
            {
                case TestType type0:
                {
                    var handler = _services.GetRequiredService<IMessageHandler<TestType>>();
                    await handler.HandleMessage(type0);
                    break;
                }
                default:
                    throw new WeirdError($""Cannot handle messages of type '{data.GetType().FullName}'"");
            }

        }
}", "WeirdError");
}
